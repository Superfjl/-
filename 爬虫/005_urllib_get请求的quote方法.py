
"""
    由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，
这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。
但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，
所以，中国制定了GB2312编码，用来把中文编进去。
你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc‐kr里，
各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
    Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。
现代操作系统和大多数编程语言都直接支持Unicode。
"""

import urllib.request
import urllib.parse

"""
 使用百度搜索周杰伦相关信息，真不行啦，百度应该是做了反爬错事啦
 那就使用必应吧
"""
url = 'https://www.baidu.com/s?wd='
name = "周杰伦"
# urllib.parse.quote(str) 这个方法可以将字符串转化为unicode编码
name = urllib.parse.quote(name)
url = url+name
print(url)

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    # 这必须加cookie,不加cookie真不行啦
    'cookie':'BIDUPSID=20B48AA69066FECFB975482140CC6C45; PSTM=1692975106; BAIDUID=20B48AA69066FECF934B15B17EDBCE81:FG=1; BD_UPN=12314753; H_WISE_SIDS=110085_268592_259642_256151_269832_269904_270604_271035_271022_271171_271177_267659_271323_270102_271562_271188_272223_272279_272008_272455_269729_271689_272821_273094_273161_273121_273301_270055_273704_273734_274177_269610_273917_274234_273043_272806_272560_272802_188331; H_WISE_SIDS_BFESS=110085_268592_259642_256151_269832_269904_270604_271035_271022_271171_271177_267659_271323_270102_271562_271188_272223_272279_272008_272455_269729_271689_272821_273094_273161_273121_273301_270055_273704_273734_274177_269610_273917_274234_273043_272806_272560_272802_188331; BAIDUID_BFESS=20B48AA69066FECF934B15B17EDBCE81:FG=1; ZFY=TqDMr4CQ1E3qObSoDd5ZpZzs2dlnQb6WS4jfek09Yz4:C; BDUSS=ktsbmgxRGM4eVlPOTRoT243MDBXYk9JVW5OfnpIfmQyVk1GZ201bW1vSmpJa0psRVFBQUFBJCQAAAAAAAAAAAEAAAAnaTy8bm1jdmLM7NCrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGOVGmVjlRplR; BDUSS_BFESS=ktsbmgxRGM4eVlPOTRoT243MDBXYk9JVW5OfnpIfmQyVk1GZ201bW1vSmpJa0psRVFBQUFBJCQAAAAAAAAAAAEAAAAnaTy8bm1jdmLM7NCrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGOVGmVjlRplR; BA_HECTOR=20a5a0a4200la0al2g858ka31ihnq5c1o; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; BD_CK_SAM=1; PSINO=2; delPer=0; COOKIE_SESSION=1152360_1_4_4_17_12_0_0_4_4_3_4_1292665_0_10_0_1696331977_1695037978_1696331967%7C9%23105792_16_1695037963%7C9; ab_sr=1.0.1_ZjU3MzFkNWZkYzk3MmEwYTljYmYyNTU0NmQ0ZWM2YzQ2ZWQ0YWQ5ZTdlY2UzZmEzMjI5OWJlZTMyYmUxOWRiYTJhMTFkYmVkNmVkNTBjZDdjOWY1OWRiNWFjMDAwMTkxYjQ1NmIzZWQwZTg4YjBmYTA1MTQzZDc5ZTRmYmRkNzE2MDFiODk5OWZiNDQ5MjU3OWYyMmY3YmJmYmM5OTdhZA==; BDRCVFR[kSyA9a8U-kc]=mk3SLVN4HKm; B64_BOT=1; H_PS_PSSID=26350; H_PS_645EC=67f4xc91orAdYSXlMs79uvmcu2dWFH6ZHzDvDhWM80IxpmIAkG51W1C%2FneY0DaFGoUIb0WqONRc; BDORZ=FFFB88E999055A3F8A630C64834BD6D0'
}
# 请求对象的定制
request = urllib.request.Request(url=url,headers=headers)
# 模拟向浏览器发送请求，并接受返回的响应
response = urllib.request.urlopen(url=request)

# 获取响应的内容
content = response.read().decode('utf-8')

# 打印数据
print(content)


